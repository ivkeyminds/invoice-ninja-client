<?php
/**
 * RecurringInvoice
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  IvkeyMinds\InvoiceNinjaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Invoice Ninja
 *
 * Invoice Ninja. Open Source Invoicing lives here.
 *
 * The version of the OpenAPI document: 5.5.58
 * Contact: contact@invoiceninja.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace IvkeyMinds\InvoiceNinjaClient\Model;

use \ArrayAccess;
use \IvkeyMinds\InvoiceNinjaClient\ObjectSerializer;

/**
 * RecurringInvoice Class Doc Comment
 *
 * @category Class
 * @package  IvkeyMinds\InvoiceNinjaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RecurringInvoice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RecurringInvoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'user_id' => 'string',
        'assigned_user_id' => 'string',
        'company_id' => 'string',
        'client_id' => 'string',
        'status_id' => 'string',
        'frequency_id' => 'float',
        'remaining_cycles' => 'float',
        'number' => 'string',
        'po_number' => 'string',
        'terms' => 'string',
        'public_notes' => 'string',
        'private_notes' => 'string',
        'footer' => 'string',
        'custom_value1' => 'string',
        'custom_value2' => 'string',
        'custom_value3' => 'string',
        'custom_value4' => 'string',
        'tax_name1' => 'string',
        'tax_name2' => 'string',
        'tax_rate1' => 'float',
        'tax_rate2' => 'float',
        'tax_name3' => 'string',
        'tax_rate3' => 'float',
        'total_taxes' => 'float',
        'line_items' => 'object',
        'amount' => 'float',
        'balance' => 'float',
        'paid_to_date' => 'float',
        'discount' => 'float',
        'partial' => 'float',
        'is_amount_discount' => 'bool',
        'is_deleted' => 'bool',
        'uses_inclusive_taxes' => 'bool',
        'date' => '\DateTime',
        'last_sent_date' => '\DateTime',
        'next_send_date' => '\DateTime',
        'partial_due_date' => '\DateTime',
        'due_date' => '\DateTime',
        'settings' => '\IvkeyMinds\InvoiceNinjaClient\Model\CompanySettings',
        'last_viewed' => 'float',
        'updated_at' => 'float',
        'archived_at' => 'float',
        'custom_surcharge1' => 'float',
        'custom_surcharge2' => 'float',
        'custom_surcharge3' => 'float',
        'custom_surcharge4' => 'float',
        'custom_surcharge_tax1' => 'bool',
        'custom_surcharge_tax2' => 'bool',
        'custom_surcharge_tax3' => 'bool',
        'custom_surcharge_tax4' => 'bool',
        'auto_bill_enabled' => 'bool',
        'auto_bill' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'user_id' => null,
        'assigned_user_id' => null,
        'company_id' => null,
        'client_id' => null,
        'status_id' => null,
        'frequency_id' => null,
        'remaining_cycles' => null,
        'number' => null,
        'po_number' => null,
        'terms' => null,
        'public_notes' => null,
        'private_notes' => null,
        'footer' => null,
        'custom_value1' => null,
        'custom_value2' => null,
        'custom_value3' => null,
        'custom_value4' => null,
        'tax_name1' => null,
        'tax_name2' => null,
        'tax_rate1' => 'float',
        'tax_rate2' => 'float',
        'tax_name3' => null,
        'tax_rate3' => 'float',
        'total_taxes' => 'float',
        'line_items' => null,
        'amount' => 'float',
        'balance' => 'float',
        'paid_to_date' => 'float',
        'discount' => 'float',
        'partial' => 'float',
        'is_amount_discount' => null,
        'is_deleted' => null,
        'uses_inclusive_taxes' => null,
        'date' => 'date',
        'last_sent_date' => 'date',
        'next_send_date' => 'date',
        'partial_due_date' => 'date',
        'due_date' => 'date',
        'settings' => null,
        'last_viewed' => 'integer',
        'updated_at' => 'integer',
        'archived_at' => 'integer',
        'custom_surcharge1' => 'float',
        'custom_surcharge2' => 'float',
        'custom_surcharge3' => 'float',
        'custom_surcharge4' => 'float',
        'custom_surcharge_tax1' => null,
        'custom_surcharge_tax2' => null,
        'custom_surcharge_tax3' => null,
        'custom_surcharge_tax4' => null,
        'auto_bill_enabled' => null,
        'auto_bill' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'id' => true,
        'user_id' => true,
        'assigned_user_id' => true,
        'company_id' => true,
        'client_id' => true,
        'status_id' => true,
        'frequency_id' => true,
        'remaining_cycles' => true,
        'number' => true,
        'po_number' => true,
        'terms' => true,
        'public_notes' => true,
        'private_notes' => true,
        'footer' => true,
        'custom_value1' => true,
        'custom_value2' => true,
        'custom_value3' => true,
        'custom_value4' => true,
        'tax_name1' => true,
        'tax_name2' => true,
        'tax_rate1' => true,
        'tax_rate2' => true,
        'tax_name3' => true,
        'tax_rate3' => true,
        'total_taxes' => true,
        'line_items' => true,
        'amount' => true,
        'balance' => true,
        'paid_to_date' => true,
        'discount' => true,
        'partial' => true,
        'is_amount_discount' => true,
        'is_deleted' => true,
        'uses_inclusive_taxes' => true,
        'date' => true,
        'last_sent_date' => true,
        'next_send_date' => true,
        'partial_due_date' => true,
        'due_date' => true,
        'settings' => true,
        'last_viewed' => true,
        'updated_at' => true,
        'archived_at' => true,
        'custom_surcharge1' => true,
        'custom_surcharge2' => true,
        'custom_surcharge3' => true,
        'custom_surcharge4' => true,
        'custom_surcharge_tax1' => true,
        'custom_surcharge_tax2' => true,
        'custom_surcharge_tax3' => true,
        'custom_surcharge_tax4' => true,
        'auto_bill_enabled' => true,
        'auto_bill' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'user_id' => 'user_id',
        'assigned_user_id' => 'assigned_user_id',
        'company_id' => 'company_id',
        'client_id' => 'client_id',
        'status_id' => 'status_id',
        'frequency_id' => 'frequency_id',
        'remaining_cycles' => 'remaining_cycles',
        'number' => 'number',
        'po_number' => 'po_number',
        'terms' => 'terms',
        'public_notes' => 'public_notes',
        'private_notes' => 'private_notes',
        'footer' => 'footer',
        'custom_value1' => 'custom_value1',
        'custom_value2' => 'custom_value2',
        'custom_value3' => 'custom_value3',
        'custom_value4' => 'custom_value4',
        'tax_name1' => 'tax_name1',
        'tax_name2' => 'tax_name2',
        'tax_rate1' => 'tax_rate1',
        'tax_rate2' => 'tax_rate2',
        'tax_name3' => 'tax_name3',
        'tax_rate3' => 'tax_rate3',
        'total_taxes' => 'total_taxes',
        'line_items' => 'line_items',
        'amount' => 'amount',
        'balance' => 'balance',
        'paid_to_date' => 'paid_to_date',
        'discount' => 'discount',
        'partial' => 'partial',
        'is_amount_discount' => 'is_amount_discount',
        'is_deleted' => 'is_deleted',
        'uses_inclusive_taxes' => 'uses_inclusive_taxes',
        'date' => 'date',
        'last_sent_date' => 'last_sent_date',
        'next_send_date' => 'next_send_date',
        'partial_due_date' => 'partial_due_date',
        'due_date' => 'due_date',
        'settings' => 'settings',
        'last_viewed' => 'last_viewed',
        'updated_at' => 'updated_at',
        'archived_at' => 'archived_at',
        'custom_surcharge1' => 'custom_surcharge1',
        'custom_surcharge2' => 'custom_surcharge2',
        'custom_surcharge3' => 'custom_surcharge3',
        'custom_surcharge4' => 'custom_surcharge4',
        'custom_surcharge_tax1' => 'custom_surcharge_tax1',
        'custom_surcharge_tax2' => 'custom_surcharge_tax2',
        'custom_surcharge_tax3' => 'custom_surcharge_tax3',
        'custom_surcharge_tax4' => 'custom_surcharge_tax4',
        'auto_bill_enabled' => 'auto_bill_enabled',
        'auto_bill' => 'auto_bill'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'user_id' => 'setUserId',
        'assigned_user_id' => 'setAssignedUserId',
        'company_id' => 'setCompanyId',
        'client_id' => 'setClientId',
        'status_id' => 'setStatusId',
        'frequency_id' => 'setFrequencyId',
        'remaining_cycles' => 'setRemainingCycles',
        'number' => 'setNumber',
        'po_number' => 'setPoNumber',
        'terms' => 'setTerms',
        'public_notes' => 'setPublicNotes',
        'private_notes' => 'setPrivateNotes',
        'footer' => 'setFooter',
        'custom_value1' => 'setCustomValue1',
        'custom_value2' => 'setCustomValue2',
        'custom_value3' => 'setCustomValue3',
        'custom_value4' => 'setCustomValue4',
        'tax_name1' => 'setTaxName1',
        'tax_name2' => 'setTaxName2',
        'tax_rate1' => 'setTaxRate1',
        'tax_rate2' => 'setTaxRate2',
        'tax_name3' => 'setTaxName3',
        'tax_rate3' => 'setTaxRate3',
        'total_taxes' => 'setTotalTaxes',
        'line_items' => 'setLineItems',
        'amount' => 'setAmount',
        'balance' => 'setBalance',
        'paid_to_date' => 'setPaidToDate',
        'discount' => 'setDiscount',
        'partial' => 'setPartial',
        'is_amount_discount' => 'setIsAmountDiscount',
        'is_deleted' => 'setIsDeleted',
        'uses_inclusive_taxes' => 'setUsesInclusiveTaxes',
        'date' => 'setDate',
        'last_sent_date' => 'setLastSentDate',
        'next_send_date' => 'setNextSendDate',
        'partial_due_date' => 'setPartialDueDate',
        'due_date' => 'setDueDate',
        'settings' => 'setSettings',
        'last_viewed' => 'setLastViewed',
        'updated_at' => 'setUpdatedAt',
        'archived_at' => 'setArchivedAt',
        'custom_surcharge1' => 'setCustomSurcharge1',
        'custom_surcharge2' => 'setCustomSurcharge2',
        'custom_surcharge3' => 'setCustomSurcharge3',
        'custom_surcharge4' => 'setCustomSurcharge4',
        'custom_surcharge_tax1' => 'setCustomSurchargeTax1',
        'custom_surcharge_tax2' => 'setCustomSurchargeTax2',
        'custom_surcharge_tax3' => 'setCustomSurchargeTax3',
        'custom_surcharge_tax4' => 'setCustomSurchargeTax4',
        'auto_bill_enabled' => 'setAutoBillEnabled',
        'auto_bill' => 'setAutoBill'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'user_id' => 'getUserId',
        'assigned_user_id' => 'getAssignedUserId',
        'company_id' => 'getCompanyId',
        'client_id' => 'getClientId',
        'status_id' => 'getStatusId',
        'frequency_id' => 'getFrequencyId',
        'remaining_cycles' => 'getRemainingCycles',
        'number' => 'getNumber',
        'po_number' => 'getPoNumber',
        'terms' => 'getTerms',
        'public_notes' => 'getPublicNotes',
        'private_notes' => 'getPrivateNotes',
        'footer' => 'getFooter',
        'custom_value1' => 'getCustomValue1',
        'custom_value2' => 'getCustomValue2',
        'custom_value3' => 'getCustomValue3',
        'custom_value4' => 'getCustomValue4',
        'tax_name1' => 'getTaxName1',
        'tax_name2' => 'getTaxName2',
        'tax_rate1' => 'getTaxRate1',
        'tax_rate2' => 'getTaxRate2',
        'tax_name3' => 'getTaxName3',
        'tax_rate3' => 'getTaxRate3',
        'total_taxes' => 'getTotalTaxes',
        'line_items' => 'getLineItems',
        'amount' => 'getAmount',
        'balance' => 'getBalance',
        'paid_to_date' => 'getPaidToDate',
        'discount' => 'getDiscount',
        'partial' => 'getPartial',
        'is_amount_discount' => 'getIsAmountDiscount',
        'is_deleted' => 'getIsDeleted',
        'uses_inclusive_taxes' => 'getUsesInclusiveTaxes',
        'date' => 'getDate',
        'last_sent_date' => 'getLastSentDate',
        'next_send_date' => 'getNextSendDate',
        'partial_due_date' => 'getPartialDueDate',
        'due_date' => 'getDueDate',
        'settings' => 'getSettings',
        'last_viewed' => 'getLastViewed',
        'updated_at' => 'getUpdatedAt',
        'archived_at' => 'getArchivedAt',
        'custom_surcharge1' => 'getCustomSurcharge1',
        'custom_surcharge2' => 'getCustomSurcharge2',
        'custom_surcharge3' => 'getCustomSurcharge3',
        'custom_surcharge4' => 'getCustomSurcharge4',
        'custom_surcharge_tax1' => 'getCustomSurchargeTax1',
        'custom_surcharge_tax2' => 'getCustomSurchargeTax2',
        'custom_surcharge_tax3' => 'getCustomSurchargeTax3',
        'custom_surcharge_tax4' => 'getCustomSurchargeTax4',
        'auto_bill_enabled' => 'getAutoBillEnabled',
        'auto_bill' => 'getAutoBill'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('assigned_user_id', $data ?? [], null);
        $this->setIfExists('company_id', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('status_id', $data ?? [], null);
        $this->setIfExists('frequency_id', $data ?? [], null);
        $this->setIfExists('remaining_cycles', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('po_number', $data ?? [], null);
        $this->setIfExists('terms', $data ?? [], null);
        $this->setIfExists('public_notes', $data ?? [], null);
        $this->setIfExists('private_notes', $data ?? [], null);
        $this->setIfExists('footer', $data ?? [], null);
        $this->setIfExists('custom_value1', $data ?? [], null);
        $this->setIfExists('custom_value2', $data ?? [], null);
        $this->setIfExists('custom_value3', $data ?? [], null);
        $this->setIfExists('custom_value4', $data ?? [], null);
        $this->setIfExists('tax_name1', $data ?? [], null);
        $this->setIfExists('tax_name2', $data ?? [], null);
        $this->setIfExists('tax_rate1', $data ?? [], null);
        $this->setIfExists('tax_rate2', $data ?? [], null);
        $this->setIfExists('tax_name3', $data ?? [], null);
        $this->setIfExists('tax_rate3', $data ?? [], null);
        $this->setIfExists('total_taxes', $data ?? [], null);
        $this->setIfExists('line_items', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('paid_to_date', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('partial', $data ?? [], null);
        $this->setIfExists('is_amount_discount', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('uses_inclusive_taxes', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('last_sent_date', $data ?? [], null);
        $this->setIfExists('next_send_date', $data ?? [], null);
        $this->setIfExists('partial_due_date', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('settings', $data ?? [], null);
        $this->setIfExists('last_viewed', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('archived_at', $data ?? [], null);
        $this->setIfExists('custom_surcharge1', $data ?? [], null);
        $this->setIfExists('custom_surcharge2', $data ?? [], null);
        $this->setIfExists('custom_surcharge3', $data ?? [], null);
        $this->setIfExists('custom_surcharge4', $data ?? [], null);
        $this->setIfExists('custom_surcharge_tax1', $data ?? [], null);
        $this->setIfExists('custom_surcharge_tax2', $data ?? [], null);
        $this->setIfExists('custom_surcharge_tax3', $data ?? [], null);
        $this->setIfExists('custom_surcharge_tax4', $data ?? [], null);
        $this->setIfExists('auto_bill', $data ?? [], null);
        $this->setIfExists('auto_bill_enabled', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The hashed id of the recurring invoice
     *
     * @return self
     */
    public function setId($id)
    {
        
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id The user hashed id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets assigned_user_id
     *
     * @return string|null
     */
    public function getAssignedUserId()
    {
        return $this->container['assigned_user_id'];
    }

    /**
     * Sets assigned_user_id
     *
     * @param string|null $assigned_user_id The assigned user hashed id
     *
     * @return self
     */
    public function setAssignedUserId($assigned_user_id)
    {
        
        $this->container['assigned_user_id'] = $assigned_user_id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return string|null
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string|null $company_id The company hashed id
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id The client hashed id
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets status_id
     *
     * @return string|null
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param string|null $status_id The invoice status variable
     *
     * @return self
     */
    public function setStatusId($status_id)
    {
        
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets frequency_id
     *
     * @return float|null
     */
    public function getFrequencyId()
    {
        return $this->container['frequency_id'];
    }

    /**
     * Sets frequency_id
     *
     * @param float|null $frequency_id The recurring invoice frequency
     *
     * @return self
     */
    public function setFrequencyId($frequency_id)
    {
        
        $this->container['frequency_id'] = $frequency_id;

        return $this;
    }

    /**
     * Gets remaining_cycles
     *
     * @return float|null
     */
    public function getRemainingCycles()
    {
        return $this->container['remaining_cycles'];
    }

    /**
     * Sets remaining_cycles
     *
     * @param float|null $remaining_cycles The number of invoices left to be generated
     *
     * @return self
     */
    public function setRemainingCycles($remaining_cycles)
    {
        
        $this->container['remaining_cycles'] = $remaining_cycles;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number The recurringinvoice number - is a unique alpha numeric number per invoice per company
     *
     * @return self
     */
    public function setNumber($number)
    {
        
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets po_number
     *
     * @return string|null
     */
    public function getPoNumber()
    {
        return $this->container['po_number'];
    }

    /**
     * Sets po_number
     *
     * @param string|null $po_number The purchase order associated with this recurring invoice
     *
     * @return self
     */
    public function setPoNumber($po_number)
    {
        
        $this->container['po_number'] = $po_number;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return string|null
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param string|null $terms The invoice terms
     *
     * @return self
     */
    public function setTerms($terms)
    {
        
        $this->container['terms'] = $terms;

        return $this;
    }

    /**
     * Gets public_notes
     *
     * @return string|null
     */
    public function getPublicNotes()
    {
        return $this->container['public_notes'];
    }

    /**
     * Sets public_notes
     *
     * @param string|null $public_notes The public notes of the invoice
     *
     * @return self
     */
    public function setPublicNotes($public_notes)
    {
        
        $this->container['public_notes'] = $public_notes;

        return $this;
    }

    /**
     * Gets private_notes
     *
     * @return string|null
     */
    public function getPrivateNotes()
    {
        return $this->container['private_notes'];
    }

    /**
     * Sets private_notes
     *
     * @param string|null $private_notes The private notes of the invoice
     *
     * @return self
     */
    public function setPrivateNotes($private_notes)
    {
        
        $this->container['private_notes'] = $private_notes;

        return $this;
    }

    /**
     * Gets footer
     *
     * @return string|null
     */
    public function getFooter()
    {
        return $this->container['footer'];
    }

    /**
     * Sets footer
     *
     * @param string|null $footer The invoice footer notes
     *
     * @return self
     */
    public function setFooter($footer)
    {
        
        $this->container['footer'] = $footer;

        return $this;
    }

    /**
     * Gets custom_value1
     *
     * @return string|null
     */
    public function getCustomValue1()
    {
        return $this->container['custom_value1'];
    }

    /**
     * Sets custom_value1
     *
     * @param string|null $custom_value1 A custom field value
     *
     * @return self
     */
    public function setCustomValue1($custom_value1)
    {
        
        $this->container['custom_value1'] = $custom_value1;

        return $this;
    }

    /**
     * Gets custom_value2
     *
     * @return string|null
     */
    public function getCustomValue2()
    {
        return $this->container['custom_value2'];
    }

    /**
     * Sets custom_value2
     *
     * @param string|null $custom_value2 A custom field value
     *
     * @return self
     */
    public function setCustomValue2($custom_value2)
    {
        
        $this->container['custom_value2'] = $custom_value2;

        return $this;
    }

    /**
     * Gets custom_value3
     *
     * @return string|null
     */
    public function getCustomValue3()
    {
        return $this->container['custom_value3'];
    }

    /**
     * Sets custom_value3
     *
     * @param string|null $custom_value3 A custom field value
     *
     * @return self
     */
    public function setCustomValue3($custom_value3)
    {
        
        $this->container['custom_value3'] = $custom_value3;

        return $this;
    }

    /**
     * Gets custom_value4
     *
     * @return string|null
     */
    public function getCustomValue4()
    {
        return $this->container['custom_value4'];
    }

    /**
     * Sets custom_value4
     *
     * @param string|null $custom_value4 A custom field value
     *
     * @return self
     */
    public function setCustomValue4($custom_value4)
    {
        
        $this->container['custom_value4'] = $custom_value4;

        return $this;
    }

    /**
     * Gets tax_name1
     *
     * @return string|null
     */
    public function getTaxName1()
    {
        return $this->container['tax_name1'];
    }

    /**
     * Sets tax_name1
     *
     * @param string|null $tax_name1 The tax name
     *
     * @return self
     */
    public function setTaxName1($tax_name1)
    {
        
        $this->container['tax_name1'] = $tax_name1;

        return $this;
    }

    /**
     * Gets tax_name2
     *
     * @return string|null
     */
    public function getTaxName2()
    {
        return $this->container['tax_name2'];
    }

    /**
     * Sets tax_name2
     *
     * @param string|null $tax_name2 The tax name
     *
     * @return self
     */
    public function setTaxName2($tax_name2)
    {
        
        $this->container['tax_name2'] = $tax_name2;

        return $this;
    }

    /**
     * Gets tax_rate1
     *
     * @return float|null
     */
    public function getTaxRate1()
    {
        return $this->container['tax_rate1'];
    }

    /**
     * Sets tax_rate1
     *
     * @param float|null $tax_rate1 The tax rate
     *
     * @return self
     */
    public function setTaxRate1($tax_rate1)
    {
        
        $this->container['tax_rate1'] = $tax_rate1;

        return $this;
    }

    /**
     * Gets tax_rate2
     *
     * @return float|null
     */
    public function getTaxRate2()
    {
        return $this->container['tax_rate2'];
    }

    /**
     * Sets tax_rate2
     *
     * @param float|null $tax_rate2 The tax rate
     *
     * @return self
     */
    public function setTaxRate2($tax_rate2)
    {
        
        $this->container['tax_rate2'] = $tax_rate2;

        return $this;
    }

    /**
     * Gets tax_name3
     *
     * @return string|null
     */
    public function getTaxName3()
    {
        return $this->container['tax_name3'];
    }

    /**
     * Sets tax_name3
     *
     * @param string|null $tax_name3 The tax name
     *
     * @return self
     */
    public function setTaxName3($tax_name3)
    {
        
        $this->container['tax_name3'] = $tax_name3;

        return $this;
    }

    /**
     * Gets tax_rate3
     *
     * @return float|null
     */
    public function getTaxRate3()
    {
        return $this->container['tax_rate3'];
    }

    /**
     * Sets tax_rate3
     *
     * @param float|null $tax_rate3 The tax rate
     *
     * @return self
     */
    public function setTaxRate3($tax_rate3)
    {
        
        $this->container['tax_rate3'] = $tax_rate3;

        return $this;
    }

    /**
     * Gets total_taxes
     *
     * @return float|null
     */
    public function getTotalTaxes()
    {
        return $this->container['total_taxes'];
    }

    /**
     * Sets total_taxes
     *
     * @param float|null $total_taxes The total taxes for the invoice
     *
     * @return self
     */
    public function setTotalTaxes($total_taxes)
    {
        
        $this->container['total_taxes'] = $total_taxes;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return object|null
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param object|null $line_items An array of objects which define the line items of the invoice
     *
     * @return self
     */
    public function setLineItems($line_items)
    {
        
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount The invoice amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance The invoice balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets paid_to_date
     *
     * @return float|null
     */
    public function getPaidToDate()
    {
        return $this->container['paid_to_date'];
    }

    /**
     * Sets paid_to_date
     *
     * @param float|null $paid_to_date The amount paid on the invoice to date
     *
     * @return self
     */
    public function setPaidToDate($paid_to_date)
    {
        
        $this->container['paid_to_date'] = $paid_to_date;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return float|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param float|null $discount The invoice discount, can be an amount or a percentage
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets partial
     *
     * @return float|null
     */
    public function getPartial()
    {
        return $this->container['partial'];
    }

    /**
     * Sets partial
     *
     * @param float|null $partial The deposit/partial amount
     *
     * @return self
     */
    public function setPartial($partial)
    {
        
        $this->container['partial'] = $partial;

        return $this;
    }

    /**
     * Gets is_amount_discount
     *
     * @return bool|null
     */
    public function getIsAmountDiscount()
    {
        return $this->container['is_amount_discount'];
    }

    /**
     * Sets is_amount_discount
     *
     * @param bool|null $is_amount_discount Flag determining if the discount is an amount or a percentage
     *
     * @return self
     */
    public function setIsAmountDiscount($is_amount_discount)
    {
        
        $this->container['is_amount_discount'] = $is_amount_discount;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted Defines if the invoice has been deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets uses_inclusive_taxes
     *
     * @return bool|null
     */
    public function getUsesInclusiveTaxes()
    {
        return $this->container['uses_inclusive_taxes'];
    }

    /**
     * Sets uses_inclusive_taxes
     *
     * @param bool|null $uses_inclusive_taxes Defines the type of taxes used as either inclusive or exclusive
     *
     * @return self
     */
    public function setUsesInclusiveTaxes($uses_inclusive_taxes)
    {
        
        $this->container['uses_inclusive_taxes'] = $uses_inclusive_taxes;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date The Invoice Date
     *
     * @return self
     */
    public function setDate($date)
    {
        
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets last_sent_date
     *
     * @return \DateTime|null
     */
    public function getLastSentDate()
    {
        return $this->container['last_sent_date'];
    }

    /**
     * Sets last_sent_date
     *
     * @param \DateTime|null $last_sent_date The last date the invoice was sent out
     *
     * @return self
     */
    public function setLastSentDate($last_sent_date)
    {
        
        $this->container['last_sent_date'] = $last_sent_date;

        return $this;
    }

    /**
     * Gets next_send_date
     *
     * @return \DateTime|null
     */
    public function getNextSendDate()
    {
        return $this->container['next_send_date'];
    }

    /**
     * Sets next_send_date
     *
     * @param \DateTime|null $next_send_date The Next date for a reminder to be sent
     *
     * @return self
     */
    public function setNextSendDate($next_send_date)
    {
        
        $this->container['next_send_date'] = $next_send_date;

        return $this;
    }

    /**
     * Gets partial_due_date
     *
     * @return \DateTime|null
     */
    public function getPartialDueDate()
    {
        return $this->container['partial_due_date'];
    }

    /**
     * Sets partial_due_date
     *
     * @param \DateTime|null $partial_due_date The due date for the deposit/partial amount
     *
     * @return self
     */
    public function setPartialDueDate($partial_due_date)
    {
        
        $this->container['partial_due_date'] = $partial_due_date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date The due date of the invoice
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \IvkeyMinds\InvoiceNinjaClient\Model\CompanySettings|null
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \IvkeyMinds\InvoiceNinjaClient\Model\CompanySettings|null $settings settings
     *
     * @return self
     */
    public function setSettings($settings)
    {
        
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets last_viewed
     *
     * @return float|null
     */
    public function getLastViewed()
    {
        return $this->container['last_viewed'];
    }

    /**
     * Sets last_viewed
     *
     * @param float|null $last_viewed Timestamp
     *
     * @return self
     */
    public function setLastViewed($last_viewed)
    {
        
        $this->container['last_viewed'] = $last_viewed;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return float|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param float|null $updated_at Timestamp
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets archived_at
     *
     * @return float|null
     */
    public function getArchivedAt()
    {
        return $this->container['archived_at'];
    }

    /**
     * Sets archived_at
     *
     * @param float|null $archived_at Timestamp
     *
     * @return self
     */
    public function setArchivedAt($archived_at)
    {
        
        $this->container['archived_at'] = $archived_at;

        return $this;
    }

    /**
     * Gets custom_surcharge1
     *
     * @return float|null
     */
    public function getCustomSurcharge1()
    {
        return $this->container['custom_surcharge1'];
    }

    /**
     * Sets custom_surcharge1
     *
     * @param float|null $custom_surcharge1 First Custom Surcharge
     *
     * @return self
     */
    public function setCustomSurcharge1($custom_surcharge1)
    {
        
        $this->container['custom_surcharge1'] = $custom_surcharge1;

        return $this;
    }

    /**
     * Gets custom_surcharge2
     *
     * @return float|null
     */
    public function getCustomSurcharge2()
    {
        return $this->container['custom_surcharge2'];
    }

    /**
     * Sets custom_surcharge2
     *
     * @param float|null $custom_surcharge2 Second Custom Surcharge
     *
     * @return self
     */
    public function setCustomSurcharge2($custom_surcharge2)
    {
        
        $this->container['custom_surcharge2'] = $custom_surcharge2;

        return $this;
    }

    /**
     * Gets custom_surcharge3
     *
     * @return float|null
     */
    public function getCustomSurcharge3()
    {
        return $this->container['custom_surcharge3'];
    }

    /**
     * Sets custom_surcharge3
     *
     * @param float|null $custom_surcharge3 Third Custom Surcharge
     *
     * @return self
     */
    public function setCustomSurcharge3($custom_surcharge3)
    {
        
        $this->container['custom_surcharge3'] = $custom_surcharge3;

        return $this;
    }

    /**
     * Gets custom_surcharge4
     *
     * @return float|null
     */
    public function getCustomSurcharge4()
    {
        return $this->container['custom_surcharge4'];
    }

    /**
     * Sets custom_surcharge4
     *
     * @param float|null $custom_surcharge4 Fourth Custom Surcharge
     *
     * @return self
     */
    public function setCustomSurcharge4($custom_surcharge4)
    {
        
        $this->container['custom_surcharge4'] = $custom_surcharge4;

        return $this;
    }

    /**
     * Gets custom_surcharge_tax1
     *
     * @return bool|null
     */
    public function getCustomSurchargeTax1()
    {
        return $this->container['custom_surcharge_tax1'];
    }

    /**
     * Sets custom_surcharge_tax1
     *
     * @param bool|null $custom_surcharge_tax1 Toggles charging taxes on custom surcharge amounts
     *
     * @return self
     */
    public function setCustomSurchargeTax1($custom_surcharge_tax1)
    {
        
        $this->container['custom_surcharge_tax1'] = $custom_surcharge_tax1;

        return $this;
    }

    /**
     * Gets custom_surcharge_tax2
     *
     * @return bool|null
     */
    public function getCustomSurchargeTax2()
    {
        return $this->container['custom_surcharge_tax2'];
    }

    /**
     * Sets custom_surcharge_tax2
     *
     * @param bool|null $custom_surcharge_tax2 Toggles charging taxes on custom surcharge amounts
     *
     * @return self
     */
    public function setCustomSurchargeTax2($custom_surcharge_tax2)
    {
        
        $this->container['custom_surcharge_tax2'] = $custom_surcharge_tax2;

        return $this;
    }

    /**
     * Gets custom_surcharge_tax3
     *
     * @return bool|null
     */
    public function getCustomSurchargeTax3()
    {
        return $this->container['custom_surcharge_tax3'];
    }

    /**
     * Sets custom_surcharge_tax3
     *
     * @param bool|null $custom_surcharge_tax3 Toggles charging taxes on custom surcharge amounts
     *
     * @return self
     */
    public function setCustomSurchargeTax3($custom_surcharge_tax3)
    {
        
        $this->container['custom_surcharge_tax3'] = $custom_surcharge_tax3;

        return $this;
    }

    /**
     * Gets custom_surcharge_tax4
     *
     * @return bool|null
     */
    public function getCustomSurchargeTax4()
    {
        return $this->container['custom_surcharge_tax4'];
    }

    /**
     * Sets custom_surcharge_tax4
     *
     * @param bool|null $custom_surcharge_tax4 Toggles charging taxes on custom surcharge amounts
     *
     * @return self
     */
    public function setCustomSurchargeTax4($custom_surcharge_tax4)
    {
        
        $this->container['custom_surcharge_tax4'] = $custom_surcharge_tax4;

        return $this;
    }

    /**
     * Gets auto_bill
     *
     * @return string|null
     */
    public function getAutoBill()
    {
        return $this->container['auto_bill'];
    }

    /**
     * Sets auto_bill
     *
     * @param string|null $auto_bill Controls the auto billing mode (Enabled, Disabled, Opt-In, Opt-Out).
     *
     * @return self
     */
    public function setAutoBill($auto_bill)
    {
        if (is_null($auto_bill)) {
            array_push($this->openAPINullablesSetToNull, 'auto_bill');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auto_bill', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $allowedValues = ['off', 'always', 'optin', 'optout'];
        if (!is_null($auto_bill) && !in_array($auto_bill, $allowedValues)) {
            throw new \InvalidArgumentException(sprintf("Invalid value for 'auto_bill', must be one of '%s'", implode("', '", $allowedValues)));
        }
        $this->container['auto_bill'] = $auto_bill;

        return $this;
    }

    /**
     * Gets auto_bill_enabled
     *
     * @return bool|null
     */
    public function getAutoBillEnabled()
    {
        return $this->container['auto_bill_enabled'];
    }

    /**
     * Sets auto_bill_enabled
     *
     * @param bool|null $auto_bill_enabled Whether auto billing is currently enabled (likely read-only).
     *
     * @return self
     */
    public function setAutoBillEnabled($auto_bill_enabled)
    {
        if (is_null($auto_bill_enabled)) {
            array_push($this->openAPINullablesSetToNull, 'auto_bill_enabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auto_bill_enabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['auto_bill_enabled'] = $auto_bill_enabled;

        return $this;
    }


    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


